import kfp
from kfp import dsl
from kfp.components import func_to_container_op

@func_to_container_op
def best_model(sgd: str, random_forest: str, naive_bayes: str) -> None:
    """
    Determines the best model based on the F1-scores of different models.

    Args:
        sgd (float): The F1-score of the SGD model.
        random_forest (float): The F1-score of the Random Forest model.
        naive_bayes (float): The F1-score of the Naive Bayes model.

    Returns:
        None

    This function takes F1-scores of three different models (SGD, Random Forest, Naive Bayes)
    and determines which model has the highest F1-score. It then prints the name of the best
    model.

    Example:
        best_model(0.75, 0.82, 0.79)
        Output: The best model is: Random Forest
    """
    #f_scores = {'SGD': sgd, 'Random Forest': random_forest, 'Naive Bayes': naive_bayes}
    #best_model = max(f_scores, key=lambda x: f_scores[x])
    # print("The best model is: ", best_model)
    print("ok")


@func_to_container_op
def show_results(sgd: str, random_forest: str, naive_bayes: str) -> None:
    """
    Display classification accuracy results for different models.

    Args:
        sgd (float): Accuracy score for Stochastic Gradient Descent model.
        random_forest (float): Accuracy score for Random Forest model.
        naive_bayes (float): Accuracy score for GaussianNB  model.

    Returns:
        None

    The function takes accuracy scores for different classification models and prints the results to the console.

    Note:
        Accuracy scores should be in the range [0, 1], where 1 represents 100% accuracy.
    """

    print(f"Stochastic Gradient Descent (f1): {sgd}")
    print(f"Random Forest (f1): {random_forest}")
    print(f"Naive Bayes (f1): {naive_bayes}")


@dsl.pipeline(name='Malicious URL Pipeline', description='Applies Decision Tree, Random Forest, k-Neighbors and SGD '
                                                         'classifiers for Malicious URL detection problem.')
def malicious_URL_pipeline():
    """
    Kubeflow Pipeline for Malicious URL Detection.

    This pipeline automates the process of loading data and applying multiple classifiers (Decision Tree, Random Forest,
    k-Neighbors, and SGD) for the detection of malicious URLs. The results are then displayed using the 'show_results'
    component.

    Components:
        load: Loads data from a YAML manifest.
        sgd: Stochastic Gradient Descent (SGD) classifier.
        random_forest: Random Forest classifier.
        naive_bayes: Gaussian Naive-Bayes classifier.
        show_results: Displays the classification results.
        best_model: Choose the best model according to F1-scores

    Notes:
        Ensure that the paths in the YAML files are correctly configured.
        The pipeline assumes a structured workflow for malicious URL detection using machine learning classifiers.
        Adjustments may be necessary based on specific use cases and data requirements.
    """

    # Loads the yaml manifest for each component
    load = kfp.components.load_component_from_file('load_data/load_data.yaml')
    sgd = kfp.components.load_component_from_file('sgd/sgd.yaml')
    random_forest = kfp.components.load_component_from_file('random_forest/random_forest.yaml')
    naive_bayes = kfp.components.load_component_from_file('naive_bayes/naive_bayes.yaml')

    # Run load_data task
    load_task = load()

    # Run tasks "decision_tree", "sgd", "random_forest", and "k_neighbors" given
    # the output generated by "load_task".
    sgd_task = sgd(load_task.outputs['Data'])
    random_forest_task = random_forest(load_task.outputs['Data'])
    naive_bayes_task = naive_bayes(load_task.outputs['Data'])

    # Given the outputs from "decision_tree", "sgd", "random_forest", and "k_neighbors"
    # the component "show_results" is called to print the results.
    show_results(sgd_task.outputs['F1-score'], random_forest_task.outputs['F1-score'], naive_bayes_task.outputs['F1-score'])
    best_model(sgd_task.outputs['ClassificationReport'], random_forest_task.outputs['ClassificationReport'], naive_bayes_task.outputs['ClassificationReport'])


if __name__ == '__main__':
    kfp.compiler.Compiler().compile(malicious_URL_pipeline, 'malicious_URL_pipeline.yaml')